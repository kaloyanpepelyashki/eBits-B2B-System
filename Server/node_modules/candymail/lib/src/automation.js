"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setBodyParameters = exports.buildEmailAction = exports.init = void 0;
const path = require("path");
const config_1 = require("./config");
const queue_1 = require("./queue");
const workflow_1 = require("./workflow");
const moment = require("moment");
const connection_1 = require("./db/connection");
const init = (workflows, options) => __awaiter(void 0, void 0, void 0, function* () {
    config_1.setConfig(options);
    yield connection_1.genConnection();
    if (workflows && workflows.length > 0) {
        workflow_1.setWorkflows(workflows);
    }
    else {
        const automationFile = require(path.join(__dirname + 'candymail.automation.json'));
        workflow_1.setWorkflows(automationFile === null || automationFile === void 0 ? void 0 : automationFile.workflows);
    }
});
exports.init = init;
const buildEmailAction = (emails, sendTo, params = []) => {
    emails.forEach(({ sendDelay, subject, body, from }) => __awaiter(void 0, void 0, void 0, function* () {
        const template = 'default';
        const today = moment.utc();
        const sendAt = today.add(sendDelay, 'hours').toDate();
        const sendFrom = from;
        let formattedBody = body;
        formattedBody = setBodyParameters(body, params);
        yield queue_1.addScheduledMessage({ template, sendFrom, sendTo, sendAt, subject, body: formattedBody });
    }));
};
exports.buildEmailAction = buildEmailAction;
const setBodyParameters = (body, params = []) => {
    params.forEach(element => {
        body = body.replace(`{{${element.key}}}`, element.value);
    });
    return body;
};
exports.setBodyParameters = setBodyParameters;
