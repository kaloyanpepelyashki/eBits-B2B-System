"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorkflows = exports.runWorkflow = exports.setWorkflows = void 0;
const automation_1 = require("./automation");
const lodash_1 = require("lodash");
let loadedWorkflows;
const setWorkflows = (workflows) => {
    loadedWorkflows = workflows;
};
exports.setWorkflows = setWorkflows;
const getWorkflows = () => {
    return loadedWorkflows;
};
exports.getWorkflows = getWorkflows;
const runWorkflow = (workflow, sendTo, params = []) => __awaiter(void 0, void 0, void 0, function* () {
    if (!getWorkflows() || lodash_1.isEmpty(getWorkflows())) {
        throw new Error('No workflows found. Run the init first: init()');
    }
    const messagesInWorkflow = getWorkflows().find((message) => message.name === workflow);
    if (messagesInWorkflow) {
        yield automation_1.buildEmailAction(messagesInWorkflow.emails, sendTo, params);
    }
});
exports.runWorkflow = runWorkflow;
